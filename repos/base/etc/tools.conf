#
# Default location of Genode GCC toolchain.
#
GENODE_GCC_TOOLCHAIN_DIR ?= /usr/local/genode/tool/19.05

#
# Default location of Genode LLVM toolchain.
#
GENODE_LLVM_TOOLCHAIN_DIR ?= /usr/local/genode/tool/llvm-11.0.0

#
# The following options let you define non-default tools to use
#
# CUSTOM_LD is only used for the progressive linking of libraries.
# It is not used for linking the final target.
#
#CUSTOM_CC      = gcc
#CUSTOM_CXX     = g++
#CUSTOM_AS      = as
#CUSTOM_LD      = ld

#
# For using a cross-compile tool chain, the names of all binutils and compilers
# are typically prefixed by the target platform. Instead of defining CUSTOM_*
# variables individually for each tool, the prefix can be defined via the
# following variable.
#
# We handle all architectures that may be specified as SPEC argument to the
# package build tool.
#
ifeq ($(filter-out $(SPECS),x86_32),)
CROSS_DEV_PREFIX ?= $(GENODE_GCC_TOOLCHAIN_DIR)/bin/genode-x86-
CLANG_TARGET ?= x86_64-genode
endif
ifeq ($(filter-out $(SPECS),x86_64),)
CROSS_DEV_PREFIX ?= $(GENODE_GCC_TOOLCHAIN_DIR)/bin/genode-x86-
CLANG_TARGET ?= x86_64-genode
endif
ifeq ($(filter-out $(SPECS),arm_64),)
CROSS_DEV_PREFIX ?= $(GENODE_GCC_TOOLCHAIN_DIR)/bin/genode-aarch64-
CLANG_TARGET ?= aarch64-genode
endif
ifeq ($(filter-out $(SPECS),arm),)
CROSS_DEV_PREFIX ?= $(GENODE_GCC_TOOLCHAIN_DIR)/bin/genode-arm-
CLANG_TARGET ?= arm-genode-gnueabi
endif
ifeq ($(filter-out $(SPECS),riscv),)
CROSS_DEV_PREFIX ?= $(GENODE_GCC_TOOLCHAIN_DIR)/bin/genode-riscv-
CLANG_TARGET ?= riscv-genode
endif

#
# Use clang based compiler instead of GCC to build the code.
#
#USE_CLANG = yes

#
# We use libsupc++ from g++ version 3 because
# this version does not use thread-local storage
# via the gs register. This is an interim solution.
#
#CUSTOM_CXX_LIB = g++-3.4

#
# The default optimization level used for compiling is -O2.
# By defining the variable CC_OLEVEL, you can override this
# default value, for example to optimize your binaries for size.
#
#CC_OLEVEL = -Os

#
# If CC_OPT should be extended please use concatenation syntax like:
#
#CC_OPT += -ffunction-sections -fdata-sections

#
# If CXX_LINK_OPT (linker options given to CXX)  should be extended please use
# concatenation syntax like:
#
#CXX_LINK_OPT += -Wl,-gc-sections

#
# On non-GNU systems, you may direct the build system to use GNU-
# specific tools.
#
#TAC              ?= /opt/gnu/bin/tac
#GNU_FIND         ?= /opt/gnu/bin/find
#GNU_XARGS        ?= /opt/gnu/bin/xargs
